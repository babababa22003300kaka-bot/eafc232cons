# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
# โ              ๐ฐ FC26 COIN SELLING PRICING - ูุธุงู ุฃุณุนุงุฑ ุจูุน ุงูููููุฒ        โ
# โ                     Coin Selling Price Management                        โ
# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ

from typing import Dict, List, Optional, Tuple
from enum import Enum

# ุงุณุชูุฑุงุฏ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุงุฏูู ููุฑุจุท ูุน ุงูุฃุณุนุงุฑ
try:
    from database.admin_operations import AdminOperations
    DATABASE_AVAILABLE = True
except ImportError:
    DATABASE_AVAILABLE = False

class Platform(Enum):
    """ููุตุงุช ุงููุนุจ ุงููุฏุนููุฉ"""
    PLAYSTATION = "playstation"
    XBOX = "xbox" 
    PC = "pc"

class CoinSellPricing:
    """ุฅุฏุงุฑุฉ ุฃุณุนุงุฑ ุจูุน ุงูููููุฒ"""
    
    # ุงูุฃุณุนุงุฑ ุงูุนุงุฏูุฉ (ุงูุชุญููู ุฎูุงู 24 ุณุงุนุฉ) - ุฃุบูู ูู ุงูููุฑู
    NORMAL_PRICES = {
        # PlayStation ู Xbox ููุณ ุงูุณุนุฑ
        Platform.PLAYSTATION.value: {
            1000000: 5600,  # 1M = 5600 ุฌ.ู (ุงูุนุงุฏู - ุฃุบูู)
        },
        Platform.XBOX.value: {
            1000000: 5600,  # 1M = 5600 ุฌ.ู (ุงูุนุงุฏู - ุฃุบูู)
        },
        # PC ุณุนุฑ ูููุตู (ุฃุบูู ุดููุฉ)
        Platform.PC.value: {
            1000000: 6100,  # 1M = 6100 ุฌ.ู (ุงูุนุงุฏู - ุฃุบูู)
        }
    }
    
    # ุงูุฃุณุนุงุฑ ุงูููุฑูุฉ (ุงูุชุญููู ุฎูุงู ุณุงุนุฉ) - ุฃุฑุฎุต ูู ุงูุนุงุฏู
    INSTANT_PRICES = {
        # PlayStation ู Xbox ููุณ ุงูุณุนุฑ
        Platform.PLAYSTATION.value: {
            1000000: 5300,  # 1M = 5300 ุฌ.ู (ุงูููุฑู - ุฃูู)
        },
        Platform.XBOX.value: {
            1000000: 5300,  # 1M = 5300 ุฌ.ู (ุงูููุฑู - ุฃูู)
        },
        # PC ุณุนุฑ ูููุตู (ุฃุบูู ุดููุฉ)
        Platform.PC.value: {
            1000000: 5800,  # 1M = 5800 ุฌ.ู (ุงูููุฑู - ุฃูู)
        }
    }
    
    # ููุชูุงูู ูุน ุงูููุฏ ุงููุฏูู
    CURRENT_PRICES = NORMAL_PRICES
    

    @classmethod
    def get_price(cls, platform: str, coins: int, transfer_type: str = "normal") -> Optional[int]:
        """ุฌูุจ ุงูุณุนุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฃููุงูุ ุซู ุงูููุฏ ูุงุญุชูุงุทู"""
        
        # ูุญุงููุฉ ุฌูุจ ุงูุณุนุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฐููุฉ ุฃููุงู
        if DATABASE_AVAILABLE:
            try:
                db_price = AdminOperations.get_price(platform, transfer_type, coins)
                if db_price is not None:
                    return db_price
            except Exception:
                pass  # ูู ุญุงูุฉ ุงูุฎุทุฃุ ุงุณุชุฎุฏู ุงูุฃุณุนุงุฑ ุงูุงูุชุฑุงุถูุฉ
        
        # ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ุงูุณุนุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุณุชุฎุฏู ุงูููู ุงูุงูุชุฑุงุถูุฉ
        price_table = cls.INSTANT_PRICES if transfer_type == "instant" else cls.NORMAL_PRICES
        
        if platform not in price_table:
            return None
        
        return price_table[platform].get(coins)
    
    @classmethod
    def get_transfer_prices(cls, platform: str, coins: int) -> Dict[str, Optional[int]]:
        """ุฌูุจ ุฃุณุนุงุฑ ุงูุชุญููู ุงูุนุงุฏู ูุงูููุฑู ููููุฉ ูุนููุฉ"""
        return {
            "normal": cls.get_price(platform, coins, "normal"),
            "instant": cls.get_price(platform, coins, "instant")
        }
    
    @classmethod
    def calculate_custom_price(cls, platform: str, coins: int) -> Optional[int]:
        """ุญุณุงุจ ุงูุณุนุฑ ููููุฉ ูุฎุตุตุฉ ูู ุงูููููุฒ"""
        if platform not in cls.CURRENT_PRICES:
            return None
        
        platform_prices = cls.CURRENT_PRICES[platform]
        
        # ุฅุฐุง ูุงูุช ุงููููุฉ ููุฌูุฏุฉ ูู ุงูุจุงูุงุช ุงููุญุฏุฏุฉ
        if coins in platform_prices:
            return platform_prices[coins]
        
        # ุญุณุงุจ ุงูุณุนุฑ ุจูุงุกู ุนูู ุฃูุฑุจ ูููุฉ
        price_per_100k = cls._get_price_per_100k(platform)
        if price_per_100k:
            return int((coins / 100000) * price_per_100k)
        
        return None
    
    @classmethod
    def _get_price_per_100k(cls, platform: str) -> Optional[float]:
        """ุญุณุงุจ ุณุนุฑ ุงูู 100k ูููู ููููุตุฉ"""
        if platform not in cls.CURRENT_PRICES:
            return None
        
        # ุงุณุชุฎุฏุงู ุณุนุฑ ุงูู 100k ูุฃุณุงุณ
        return cls.CURRENT_PRICES[platform].get(100000, 150)
    
    @classmethod
    def _format_coins(cls, coins: int) -> str:
        """ุชูุณูู ุนุฑุถ ุงูููููุฒ"""
        if coins >= 1000000:
            millions = coins / 1000000
            if millions == int(millions):
                return f"{int(millions)}M"
            else:
                return f"{millions:.1f}M"
        elif coins >= 1000:
            thousands = coins / 1000
            if thousands == int(thousands):
                return f"{int(thousands)}K" 
            else:
                return f"{thousands:.0f}K"
        else:
            return str(coins)
    
    @classmethod
    def format_price(cls, price: int) -> Dict[str, str]:
        """ุชูุณูู ุงูุณุนุฑ ุจูุงุตูุฉ ุนุงุฏูุฉ"""
        if not isinstance(price, (int, float)) or price <= 0:
            return {"egp": "0 ุฌ.ู"}
        
        price = int(price)
        
        # ุจุงูุฌููู ูุน ุงููุงุตูุฉ ุงูุนุงุฏูุฉ
        formatted_egp = f"{price:,} ุฌ.ู"  # ูุงุตูุฉ ุนุงุฏูุฉ ","
        
        return {"egp": formatted_egp}
    
    @classmethod
    def get_platform_display_name(cls, platform: str) -> str:
        """ุฌูุจ ุงุณู ุงูููุตุฉ ููุนุฑุถ"""
        platform_names = {
            Platform.PLAYSTATION.value: "๐ฎ PlayStation",
            Platform.XBOX.value: "๐ฎ Xbox", 
            Platform.PC.value: "๐ฅ๏ธ PC"
        }
        return platform_names.get(platform, platform)
    
    @classmethod
    def validate_coin_amount(cls, coins: int) -> Tuple[bool, str]:
        """ุงูุชุญูู ูู ุตุญุฉ ูููุฉ ุงูููููุฒ"""
        if coins < 50000:
            return False, "โ ุงูุญุฏ ุงูุฃุฏูู ููุจูุน ูู 50,000 ูููู"
        
        if coins > 10000000:  # 10M max
            return False, "โ ุงูุญุฏ ุงูุฃูุตู ููุจูุน ูู 10,000,000 ูููู"
        
        if coins % 10000 != 0:
            return False, "โ ูุฌุจ ุฃู ุชููู ุงููููุฉ ูู ูุถุงุนูุงุช 10,000 ูููู"
        
        return True, "โ ูููุฉ ุตุญูุญุฉ"
    
    @classmethod
    def get_discount_info(cls, coins: int) -> Optional[str]:
        """ุฌูุจ ูุนูููุงุช ุงูุฎุตู ุฅู ูุฌุฏ"""
        if coins >= 2000000:  # 2M+
            return "๐ ุฎุตู ุฎุงุต ูููููุงุช ุงููุจูุฑุฉ!"
        elif coins >= 1000000:  # 1M+
            return "๐ฐ ุณุนุฑ ูููุฒ ููููููู ูููู!"
        elif coins >= 500000:  # 500K+
            return "โญ ุนุฑุถ ุฎุงุต ูููููุงุช ุงููุชูุณุทุฉ!"
        
        return None
    
    @classmethod
    def get_all_platforms(cls) -> List[str]:
        """ุฌูุจ ุฌููุน ุงูููุตุงุช ุงููุฏุนููุฉ"""
        return list(cls.CURRENT_PRICES.keys())
    
    @classmethod 
    def update_price(cls, platform: str, coins: int, new_price: int) -> bool:
        """ุชุญุฏูุซ ุณุนุฑ ูููุฉ ูุนููุฉ (ููุฅุฏุงุฑุฉ)"""
        if platform not in cls.CURRENT_PRICES:
            return False
        
        cls.CURRENT_PRICES[platform][coins] = new_price
        return True
    
    @classmethod
    def get_price_comparison(cls) -> Dict:
        """ููุงุฑูุฉ ุงูุฃุณุนุงุฑ ุจูู ุงูููุตุงุช"""
        comparison = {}
        for platform in cls.NORMAL_PRICES:
            comparison[platform] = {
                "platform_name": cls.get_platform_display_name(platform),
                "normal_base_price": cls.NORMAL_PRICES[platform].get(100000, 0),
                "instant_base_price": cls.INSTANT_PRICES[platform].get(100000, 0),
                "price_tiers": len(cls.NORMAL_PRICES[platform])
            }
        
        return comparison
    
    @classmethod
    def get_platform_pricing_message(cls, platform: str) -> str:
        """ุฑุณุงูุฉ ุฃุณุนุงุฑ ูุฎุชุตุฑุฉ - 1M ููุท - ุชุฌูุจ ุงูุฃุณุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
        if platform not in cls.NORMAL_PRICES:
            return "โ ููุตุฉ ุบูุฑ ูุฏุนููุฉ"
        
        platform_name = cls.get_platform_display_name(platform)
        
        # ุฌูุจ ุงูุฃุณุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (ููุณ ุทุฑููุฉ ุงูุฃุฒุฑุงุฑ)
        normal_price_1m = cls.get_price(platform, 1000000, "normal")
        instant_price_1m = cls.get_price(platform, 1000000, "instant")
        
        normal_formatted = f"{normal_price_1m:,} ุฌ.ู" if normal_price_1m else "ุบูุฑ ูุชุงุญ"
        instant_formatted = f"{instant_price_1m:,} ุฌ.ู" if instant_price_1m else "ุบูุฑ ูุชุงุญ"
        
        return f"""โ ุชู ุงุฎุชูุงุฑ ุงูููุตุฉ

๐ฐ ุฃุณุนุงุฑ {platform_name}:

๐ธ 1M ูููู:
   ๐ ุนุงุฏู: {normal_formatted}
   โก๏ธ ููุฑู: {instant_formatted}


๐ก ููุงุญุธุงุช:
๐ ุงูุชุญููู ุงูุนุงุฏู: ุฎูุงู 24 ุณุงุนุฉ
โก๏ธ ุงูุชุญููู ุงูููุฑู: ุฎูุงู ุณุงุนุฉ ูุงุญุฏุฉ

๐ฏ ุงุฎุชุฑ ููุน ุงูุชุญููู:"""